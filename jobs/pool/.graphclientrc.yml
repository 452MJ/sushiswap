sources:
  - name: SushiSwapV2
    handler:
      graphql:
        endpoint: https://{context.url:api.studio.thegraph.com/query/32073/v2-arbitrum/version/latest}
        retry: 2
    transforms:
      - autoPagination:
          validateSchema: true
      - filterSchema:
          mode: wrap
          filters:
            - Type.!{Factory}
  - name: SushiSwapV3
    handler:
      graphql:
        endpoint: https://{context.url:api.studio.thegraph.com/query/32073/v3-ethereum/version/latest}
    transforms:
      - autoPagination:
          validateSchema: true
      - prefix:
          value: V3_
          includeRootOperations: true
          includeTypes: true
          ignore:
            - _SubgraphErrorPolicy_
      # - filterSchema:
      #     mode: wrap
      #     filters:
      #       - Type.!{Factory}
  - name: MasterChef
    handler:
      graphql:
        endpoint: https://{context.url:api.studio.thegraph.com/query/32073/master-chefv2/version/latest}
    transforms:
      - prefix:
          value: MasterChef_
          includeRootOperations: true
          includeTypes: true
  - name: MiniChef
    handler:
      graphql:
        endpoint: https://{context.api:api.studio.thegraph.com/query/32073/minichef-arbitrum/version/latest}
    transforms:
      - prefix:
          value: MiniChef_
          includeRootOperations: true
          includeTypes: true
  - name: Blocks
    handler:
      graphql:
        endpoint: https://{context.url:api.studio.thegraph.com/query/72545/ethereum-blocks/version/latest}
        retry: 3
  - name: Steer
    handler:
      graphql:
        endpoint: https://{context.url:api.thegraph.com/subgraphs/name/steerprotocol/steer-protocol-polygon}
        retry: 3
    transforms:
      - prefix:
          value: Steer_
          includeRootOperations: true
          includeTypes: true

additionalTypeDefs: |
  # Type Extensions
  extend type Block {
    chainId: Int!
  }
  # Query Extensions
  extend type Query {
    blocksByChainIds(
      skip: Int = 0
      first: Int = 100
      where: Block_filter
      orderBy: Block_orderBy
      orderDirection: OrderDirection
      chainIds: [Int!]!
    ): [Block!]!
    oneHourBlocks(
      skip: Int = 0
      first: Int = 100
      chainIds: [Int!]!
    ): [Block!]!
    twoHourBlocks(
      skip: Int = 0
      first: Int = 100
      chainIds: [Int!]!
    ): [Block!]!
    oneDayBlocks(
      skip: Int = 0
      first: Int = 100
      chainIds: [Int!]!
    ): [Block!]!
    twoDayBlocks(
      skip: Int = 0
      first: Int = 100
      chainIds: [Int!]!
    ): [Block!]!
    oneWeekBlocks(
      skip: Int = 0
      first: Int = 100
      chainIds: [Int!]!
    ): [Block!]!
    twoWeekBlocks(
      skip: Int = 0
      first: Int = 100
      chainIds: [Int!]!
    ): [Block!]!
    oneMonthBlocks(
      skip: Int = 0
      first: Int = 100
      chainIds: [Int!]!
    ): [Block!]!
    twoMonthBlocks(
      skip: Int = 0
      first: Int = 100
      chainIds: [Int!]!
    ): [Block!]!
    customBlocks(
      skip: Int = 0
      first: Int = 100
      timestamp: Int!
      chainIds: [Int!]!
    ): [Block!]!
  }
# Had to disable global transforms since we have a jsonSchema handler in here now...
transforms:
  - autoPagination:
      validateSchema: false
  - autoTypeMerging: true
  - addSourceName: true

additionalResolvers:
  - ./resolvers/index.ts

documents:
  - ./query.graphql

codegen:
  contextType: 'MeshContext & { chainId: string; subgraphName: string; subgraphHost: string }'

